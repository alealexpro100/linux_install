#!/bin/bash
###############################################################
### arch boostrap script
### Copyright (C) 2021 ALEXPRO100 (ktifhfl)
### License: GPL v3.0
###############################################################

set -e

#Use library
if [[ -z $ALEXPRO100_LIB_VERSION ]]; then
  ALEXPRO100_LIB_LOCATION="${ALEXPRO100_LIB_LOCATION:-${BASH_SOURCE[0]%/*}/alexpro100_lib.sh}"
  if [[ -f $ALEXPRO100_LIB_LOCATION ]]; then
    echo "Using $ALEXPRO100_LIB_LOCATION."
  else
   echo -e "$ALEXPRO100_LIB_LOCATION not found!"; exit 1
  fi
  # shellcheck disable=SC1090
  source "$ALEXPRO100_LIB_LOCATION"
fi

[[ $UID != 0 ]] && return_err "This script requries root permissions!"

# Check options.
if [[ -z $3 ]]; then
  echo "Arch linux boostrap script."
  echo "Supports CUSTOM_ARCH_REPO, CORE_NAME flags."
  echo "Example 1: $0 x86_64 https://mirrors.evowise.com/archlinux /mnt base-devel mc htop"
  echo "Example 2: CUSTOM_ARCH_REPO=1 CORE_NAME=arch_repo $0 x86_64 http://mirror.site/arch_repo /mnt base-devel mc htop"
  exit 1
fi

arch=$1 mirror=$2 dir="$(realpath "$3")"; shift 3
install_packages="$*"

parse_arch "$(uname -m)"
if [[ $arch == "$arch_arch" ]]; then
  arch_chroot_command="chroot_rootfs auto"
else
  if qemu_chroot check "$arch" ok; then
    arch_chroot_command="qemu_chroot $arch"
  else
    return_err "Qemu emulation is not supported by your system. Aboring."
  fi
fi

CORE_NAME="${CORE_NAME:-core}"
if [[ $CUSTOM_ARCH_REPO == "1" ]]; then
  pkg_list=$(get_file_s - "$mirror/" | get_file_list_html)
  repo="$mirror" core_repo="$mirror"
else
  pkg_list=$(get_file_s - "$mirror/$CORE_NAME/os/$arch/" | get_file_list_html)
  if [[ -n $pkg_list ]]; then
    core_repo="$mirror/$CORE_NAME/os/$arch"
    repo="$mirror/\$repo/os/\$arch"
  else
    # If first is invalid (empty), try second variant of mirror...
    pkg_list=$(get_file_s - "$mirror/$arch/$CORE_NAME/" | get_file_list_html)
    core_repo="$mirror/$arch/$CORE_NAME"
    repo="$mirror/\$arch/\$repo"
  fi
fi
[[ -z $pkg_list ]] && return_err "Incorrect mirror $mirror!"

# Set pico complect of packages for archlinux installation.
# You can get this list by running $(pacman -Qq | sort | uniq) on newly installed system.
[[ -z ${BASIC_PACKAGES[*]} ]] && BASIC_PACKAGES=(acl attr bash bzip2 coreutils curl e2fsprogs expat filesystem ca-certificates-utils ca-certificates-mozilla p11-kit libp11-kit libtasn1 libffi findutils gawk glibc gmp gnupg gnutls gpgme keyutils krb5 libarchive libassuan libgcrypt libgpg-error libidn2 libksba libnghttp2 libpsl libssh2 libunistring lz4 mpfr ncurses npth openssl pacman pinentry readline sqlite xz zlib zstd)

case $arch in
  i?86) BASIC_PACKAGES=(archlinux32-keyring archlinux-keyring "${BASIC_PACKAGES[*]}")
  ;;
  x86_64) BASIC_PACKAGES=(archlinux-keyring "${BASIC_PACKAGES[*]}")
  ;;
  *) BASIC_PACKAGES=(archlinuxarm-keyring "${BASIC_PACKAGES[*]}")
  ;;
esac

echo "Installing archlinux $arch to $dir..."

echo "Creating cache directory and tempory rootfs... "
cache_dir="$dir/var/cache/pacman/pkg"
mkdir -p "$cache_dir"
create_tmp_dir arch_sys

msg_print note "(1) Downloading pico complect of packages: "
for package in ${BASIC_PACKAGES[*]}; do
  echo -ne "I: Retriving $package... "
  pkg_file=$(echo "${pkg_list}" | grep -m1 -e "^$package-[[:digit:]].*\.xz$" -e "^$package-[[:digit:]].*\.gz$" -e "^$package-[[:digit:]].*\.zst$")
  # Download packages.
  if [[ ! -f "${cache_dir}/${pkg_file}" ]]; then
    if get_file_s "${cache_dir}/${pkg_file}" "${core_repo}/${pkg_file}"; then
      echo ""
    else
      rm -rf "${cache_dir:?}/${pkg_file}"
      return_err "Failed to download ${pkg_file}!"
    fi
  else
    echo -e "exists!"
  fi
done

msg_print note "(2) Unpacking packages to temporary rootfs: "
for package in ${BASIC_PACKAGES[*]}; do
  echo "I: Unpacking $package... "
  pkg_file=$(echo "${pkg_list}" | grep -m1 -e "^$package-[[:digit:]].*\.xz$" -e "^$package-[[:digit:]].*\.gz$" -e "^$package-[[:digit:]].*\.zst$")
  case "${pkg_file}" in
    *.gz) tar -xzf "${cache_dir}/${pkg_file}" -C "$arch_sys" --exclude='.INSTALL' --exclude='.MTREE' --exclude='.PKGINFO' --exclude='.BUILDINFO' 2>/dev/null || return_err "Failed extraction ${pkg_file}!";;
    *.bz2) tar -xjf "${cache_dir}/${pkg_file}" -C "$arch_sys" --exclude='.INSTALL' --exclude='.MTREE' --exclude='.PKGINFO' --exclude='.BUILDINFO' 2>/dev/null || return_err "Failed extraction ${pkg_file}!";;
    *.xz) tar -xJf "${cache_dir}/${pkg_file}" -C "$arch_sys" --exclude='.INSTALL' --exclude='.MTREE' --exclude='.PKGINFO' --exclude='.BUILDINFO' 2>/dev/null || return_err "Failed extraction ${pkg_file}!";;
    *.zst) zstd -qdcf "${cache_dir}/${pkg_file}" | tar -xf - -C "$arch_sys" --exclude='.INSTALL' --exclude='.MTREE' --exclude='.PKGINFO' --exclude='.BUILDINFO' 2>/dev/null || return_err "Failed extraction ${pkg_file}!";;
    *) return_err "Incorrect format of archive ${pkg_file}! Exiting...";;
  esac
done

msg_print note "(3) Preparing tempory rootfs..."
mkdir -p "$arch_sys/etc/pacman.d"
if [[ $CUSTOM_ARCH_REPO == "1" ]]; then
  sed -i 's|SigLevel    = Required DatabaseOptional|SigLevel = Never|;s|Include =|#Include =|;s|\[core\]|#\[core\]|;s|\[extra\]|#\[extra\]|;s|\[community\]|#\[community\]|' "$arch_sys/etc/pacman.conf"
  echo -e "[$CORE_NAME]\nServer = $mirror" >> "$arch_sys/etc/pacman.conf"
else
  echo "Server = $repo" >> "$arch_sys/etc/pacman.d/mirrorlist"
fi
echo -e "update-ca-trust\npacman-key --init\npacman-key --populate\ncp -a {,/mnt}/etc/pacman.d/gnupg" >> "$arch_sys/root/run.sh"
echo "pacman -r /mnt --cachedir /mnt/var/cache/pacman/pkg --noconfirm -Sy base $install_packages" >> "$arch_sys/root/run.sh"
chmod +x "$arch_sys/root/run.sh"

msg_print note "(4) Installing to choosed directory..."
mkdir -m 0755 "$dir/var/lib" "$dir/var/lib/pacman" "$dir/log" "$dir/dev" "$dir/run" "$dir/etc" "$dir/etc/pacman.d"
mkdir -m 1777 "$dir/tmp"
mkdir -m 0555 "$dir/sys" "$dir/proc"
#Avoid "fixing" directory in order to mount filesystems normally (requried by pacman).
ROOTFS_DIR_NO_FIX=1
chroot_add_mount dir "$dir" "$arch_sys/mnt" --rbind --make-rslave
chroot_setup "$arch_sys/mnt"
$arch_chroot_command "$arch_sys" /bin/bash /root/run.sh
rm -rf "$arch_sys"
# Failsafe (file may does not exist)
mv "$dir"/etc/resolv.conf{.pacnew,} || :
mv "$dir"/etc/hosts{.pacnew,} || :
[[ $CUSTOM_ARCH_REPO != "1" ]] && echo "Server = $repo" >> "$dir"/etc/pacman.d/mirrorlist.used

echo "Archlinux was succesfully installed to $dir."

# =)
echo "Script succesfully ended its work. Have a nice day!"
